/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package library.GUI;

import java.sql.*;
import java.util.List;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import library.Exception.InputException;
import library.Model.Book;
import library.JDBC.BookDAO;
import library.JDBC.DBConnection;
import library.JDBC.UserDAO;
import library.Model.Employee;
import library.Model.Stored;
import library.Model.Student;

/**
 *
 * @author fahad
 */
public class OrderGUI extends javax.swing.JFrame {

    public String letter;

    /**
     * Creates new form bookGUI
     */
    public OrderGUI(String id) {
        initComponents();
        jLabelUser.setText(id);
        this.letter = String.valueOf(id.charAt(0));

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTableShowAll = new javax.swing.JTable();
        jButtonShowAll = new javax.swing.JButton();
        jLabelInfo = new javax.swing.JLabel();
        jComboBoxCategory = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        jButtonfindByCategory = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jButtonADD = new javax.swing.JButton();
        jTextFieldID = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jButtonDelete = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTableAdd = new javax.swing.JTable();
        jButtonOrder = new javax.swing.JButton();
        jLabelUser = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabelInfo1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(1000, 400));
        getContentPane().setLayout(null);

        jTableShowAll.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTableShowAll);

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(10, 69, 380, 250);

        jButtonShowAll.setText("Show All");
        jButtonShowAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonShowAllActionPerformed(evt);
            }
        });
        getContentPane().add(jButtonShowAll);
        jButtonShowAll.setBounds(270, 40, 76, 22);

        jLabelInfo.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabelInfo.setForeground(java.awt.Color.red);
        jLabelInfo.setText("Error ");
        getContentPane().add(jLabelInfo);
        jLabelInfo.setBounds(10, 320, 250, 40);

        jComboBoxCategory.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "business", "IT", "engineering" }));
        getContentPane().add(jComboBoxCategory);
        jComboBoxCategory.setBounds(70, 40, 80, 22);

        jLabel1.setText("Category");
        getContentPane().add(jLabel1);
        jLabel1.setBounds(10, 40, 50, 20);

        jButtonfindByCategory.setText("Search");
        jButtonfindByCategory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonfindByCategoryActionPerformed(evt);
            }
        });
        getContentPane().add(jButtonfindByCategory);
        jButtonfindByCategory.setBounds(170, 40, 80, 22);

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel2.setText("Order Books System");
        getContentPane().add(jLabel2);
        jLabel2.setBounds(400, 10, 200, 20);

        jButtonADD.setText("ADD >>");
        jButtonADD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonADDActionPerformed(evt);
            }
        });
        getContentPane().add(jButtonADD);
        jButtonADD.setBounds(450, 150, 90, 22);
        getContentPane().add(jTextFieldID);
        jTextFieldID.setBounds(460, 110, 70, 30);

        jLabel3.setText("Book ID: ");
        getContentPane().add(jLabel3);
        jLabel3.setBounds(410, 120, 50, 16);

        jButtonDelete.setText("Delete >>");
        jButtonDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDeleteActionPerformed(evt);
            }
        });
        getContentPane().add(jButtonDelete);
        jButtonDelete.setBounds(450, 190, 90, 22);

        jTableAdd.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(jTableAdd);

        getContentPane().add(jScrollPane2);
        jScrollPane2.setBounds(580, 60, 350, 260);

        jButtonOrder.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jButtonOrder.setText("Order");
        jButtonOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonOrderActionPerformed(evt);
            }
        });
        getContentPane().add(jButtonOrder);
        jButtonOrder.setBounds(840, 330, 80, 23);

        jLabelUser.setText("null");
        getContentPane().add(jLabelUser);
        jLabelUser.setBounds(680, 40, 37, 16);

        jLabel5.setText("User ID: ");
        getContentPane().add(jLabel5);
        jLabel5.setBounds(630, 40, 50, 16);

        jLabelInfo1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabelInfo1.setForeground(java.awt.Color.red);
        jLabelInfo1.setText("Error ");
        getContentPane().add(jLabelInfo1);
        jLabelInfo1.setBounds(370, 30, 260, 40);

        jButton1.setText("Logout");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1);
        jButton1.setBounds(880, 10, 72, 22);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonShowAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonShowAllActionPerformed
        // TODO add your handling code here:

        //get all the book data from the UserDAO 
        //and Display it in a JTable
        UserDAO userDAO = new UserDAO();
        Stored<Book> bookList = null;

        try {

            bookList = userDAO.getAllBooks(letter);
            if (bookList == null) {
                throw new InputException("No Books in library");
            }

            //convert the bookList and data in it to a vector of vectors
            Vector rowDataVector = new Vector();
            Vector columnDataVector = null;

            for (int i = 0; i < bookList.countItems(); i++) {

                columnDataVector = new Vector();
                columnDataVector.add(bookList.get(i).getBookid());
                columnDataVector.add(bookList.get(i).getCategory());
                columnDataVector.add(bookList.get(i).getTitle());
                columnDataVector.add(bookList.get(i).getPrice());

                //add this column data vector to the rowDataVector
                rowDataVector.add(columnDataVector);
            }

            //create a vector for column names
            Vector columnNamesVector = new Vector();
            columnNamesVector.add("BookID");
            columnNamesVector.add("CATEGORY");
            columnNamesVector.add("TITLE");
            columnNamesVector.add("PRICE");

            //init the JTable instance using the row data and column data vectors
            jTableShowAll = new JTable(rowDataVector, columnNamesVector);
            jScrollPane1.setViewportView(jTableShowAll);

        } catch (InputException ex) {
            jLabelInfo.setText(ex.getMessage());
        } catch (SQLException sqlex) {
            jLabelInfo.setText("Database error!" + sqlex.getMessage());
        }


    }//GEN-LAST:event_jButtonShowAllActionPerformed

    private void jButtonfindByCategoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonfindByCategoryActionPerformed
        // TODO add your handling code here:

        //get selected value from combox using its getselectedItem() method
        String category = jComboBoxCategory.getSelectedItem().toString();

        //call the UserDAO.findBookByCategory() to find the book record
        UserDAO userDAO = new UserDAO();

        //list book object 
        Stored<Book> bookList = null;
        try {

            bookList = userDAO.findBookByCategory(category, letter);

            //if book object return is null - category does not exist 
            if (bookList == null) {
                throw new InputException("Category: " + category + " not found!");

            }

            //convert the bookList and data in it to a vector of vectors
            Vector rowDataVector = new Vector();
            Vector columnDataVector = null;

            for (int i = 0; i < bookList.countItems(); i++) {

                columnDataVector = new Vector();
                columnDataVector.add(bookList.get(i).getBookid());
                columnDataVector.add(bookList.get(i).getCategory());
                columnDataVector.add(bookList.get(i).getTitle());
                columnDataVector.add(bookList.get(i).getPrice());

                //add this column data vector to the rowDataVector
                rowDataVector.add(columnDataVector);
            }

            //create a vector for column names
            Vector columnNamesVector = new Vector();
            columnNamesVector.add("BookID");
            columnNamesVector.add("CATEGORY");
            columnNamesVector.add("TITLE");
            columnNamesVector.add("PRICE");

            //init the JTable instance using the row data and column data vectors
            jTableShowAll = new JTable(rowDataVector, columnNamesVector);
            jScrollPane1.setViewportView(jTableShowAll);
        } catch (InputException ex) {
            jLabelInfo.setText(ex.getMessage());
        } catch (SQLException sqlex) {
            jLabelInfo.setText("DBError:" + sqlex.getMessage());
        }
    }//GEN-LAST:event_jButtonfindByCategoryActionPerformed


    private void jButtonADDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonADDActionPerformed
        // TODO add your handling code here:

        UserDAO userDAO = new UserDAO();

        try {

            //id is empty 
            if (jTextFieldID.getText().isEmpty()) {
                throw new InputException("Enter a Book ID !!!");
            }

            int bookId = Integer.parseInt(jTextFieldID.getText().toString());

            Book book = userDAO.findBookById(bookId, letter);
            if (book != null) {

                DefaultTableModel tbl = (DefaultTableModel) jTableAdd.getModel();

                String data[] = {String.valueOf(book.getBookid()), book.getCategory(), book.getTitle(), String.valueOf(book.getPrice())};

                tbl.addRow(data);

            } else {
                throw new InputException("No book with ID:" + bookId);
//                System.out.println("No book with ID:" + bookId);
//                JOptionPane.showMessageDialog(this, "No book with ID:" + bookId);
            }
        } catch (InputException ex) {
            jLabelInfo1.setText(ex.getMessage());
        } catch (SQLException sqlex) {
            jLabelInfo1.setText("DBError:" + sqlex.getMessage());
        } catch (NumberFormatException nfe) {
            jLabelInfo1.setText("Enter only number in (Book ID )");
        }

    }//GEN-LAST:event_jButtonADDActionPerformed

    private void jButtonDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDeleteActionPerformed
        // TODO add your handling code here:
        UserDAO userDAO = new UserDAO();

        try {
            int num = userDAO.deleteOrder(letter);

            if (num == 0) {
                throw new InputException("ERROR OF DELETE");
            }
        } catch (InputException ex) {
            jLabelInfo1.setText(ex.getMessage());
        } catch (SQLException ex) {
            Logger.getLogger(OrderGUI.class.getName()).log(Level.SEVERE, null, ex);
        }

        DefaultTableModel tbl = (DefaultTableModel) jTableAdd.getModel();

        if (tbl.getRowCount() == 0) {
            JOptionPane.showMessageDialog(this, "YOUR TABLE IS EMPTY");
        } else {
            tbl.removeRow(tbl.getRowCount() - 1);
        }


    }//GEN-LAST:event_jButtonDeleteActionPerformed

    private void jButtonOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonOrderActionPerformed
        // TODO add your handling code here:
        DefaultTableModel tbl = (DefaultTableModel) jTableAdd.getModel();

        boolean orderDone = true;
        if (tbl.getRowCount() == 0) {
            JOptionPane.showMessageDialog(this, "Table is empty");
        } else {

            String userid = jLabelUser.getText();
            double total = 0;

            for (int i = 0; i < tbl.getRowCount(); i++) {

                int bookid = Integer.parseInt(tbl.getValueAt(i, 0).toString());
                double price = Double.parseDouble(tbl.getValueAt(i, 3).toString());
                total = total + price;
                int insertStatus = 0;
                UserDAO userDAO = new UserDAO();

                try {
                    insertStatus = userDAO.addNewOrder(userid, bookid, total, letter);
                } catch (SQLException ex) {
                    Logger.getLogger(OrderGUI.class.getName()).log(Level.SEVERE, null, ex);
                }

                if (insertStatus != 1) {
                    JOptionPane.showMessageDialog(this, "try again to order book id :" + bookid);
                    orderDone = false;
                }

            }

            if (orderDone) {
                JOptionPane.showMessageDialog(this, "YOUR ORDER DONE");
            }

            tbl.setRowCount(0);

        }

    }//GEN-LAST:event_jButtonOrderActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:

        UserGUI login = new UserGUI();

        login.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(OrderGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(OrderGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(OrderGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(OrderGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new OrderGUI("id").setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButtonADD;
    private javax.swing.JButton jButtonDelete;
    private javax.swing.JButton jButtonOrder;
    private javax.swing.JButton jButtonShowAll;
    private javax.swing.JButton jButtonfindByCategory;
    private javax.swing.JComboBox<String> jComboBoxCategory;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabelInfo;
    private javax.swing.JLabel jLabelInfo1;
    private javax.swing.JLabel jLabelUser;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTableAdd;
    private javax.swing.JTable jTableShowAll;
    private javax.swing.JTextField jTextFieldID;
    // End of variables declaration//GEN-END:variables
}
