/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package library.GUI;

import java.sql.SQLException;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import library.Exception.InputException;
import library.Facade.BookFacade;
import library.JDBC.BookDAO;
import library.Model.Book;
import library.Model.Stored;

/**
 *
 * @author fahad
 */
public class BookGUI extends javax.swing.JFrame {

    /**
     * Creates new form BookGUI
     */
    public BookGUI() {
        initComponents();
        jComboBoxCategory.insertItemAt("", 0);
        jComboBoxCategory.setSelectedIndex(0);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jButtonFindByID = new javax.swing.JButton();
        jButtonAdd = new javax.swing.JButton();
        jButtonUpdate = new javax.swing.JButton();
        jButtonDelete = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jTextFieldID = new javax.swing.JTextField();
        jComboBoxCategory = new javax.swing.JComboBox<>();
        jTextFieldTitle = new javax.swing.JTextField();
        jTextFieldPrice = new javax.swing.JTextField();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTableShow = new javax.swing.JTable();
        jButtonShowAll = new javax.swing.JButton();
        jLabelInfo = new javax.swing.JLabel();
        jButtonFilter = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(jTable2);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(500, 600));
        getContentPane().setLayout(null);

        jButtonFindByID.setText("Find By ID");
        jButtonFindByID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonFindByIDActionPerformed(evt);
            }
        });
        getContentPane().add(jButtonFindByID);
        jButtonFindByID.setBounds(270, 60, 90, 22);

        jButtonAdd.setText("ADD");
        jButtonAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddActionPerformed(evt);
            }
        });
        getContentPane().add(jButtonAdd);
        jButtonAdd.setBounds(270, 110, 90, 22);

        jButtonUpdate.setText("Update");
        jButtonUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonUpdateActionPerformed(evt);
            }
        });
        getContentPane().add(jButtonUpdate);
        jButtonUpdate.setBounds(270, 160, 90, 22);

        jButtonDelete.setText("Delete");
        jButtonDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDeleteActionPerformed(evt);
            }
        });
        getContentPane().add(jButtonDelete);
        jButtonDelete.setBounds(270, 210, 90, 22);

        jLabel1.setText("Book ID :");
        getContentPane().add(jLabel1);
        jLabel1.setBounds(40, 60, 50, 30);

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel2.setText("Book Management");
        getContentPane().add(jLabel2);
        jLabel2.setBounds(100, 10, 230, 32);

        jLabel3.setText("Category :");
        getContentPane().add(jLabel3);
        jLabel3.setBounds(50, 110, 60, 16);

        jLabel4.setText("Title :");
        getContentPane().add(jLabel4);
        jLabel4.setBounds(60, 160, 37, 16);

        jLabel5.setText("Price :");
        getContentPane().add(jLabel5);
        jLabel5.setBounds(60, 210, 37, 16);

        jTextFieldID.setToolTipText("Book ID");
        jTextFieldID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldIDActionPerformed(evt);
            }
        });
        getContentPane().add(jTextFieldID);
        jTextFieldID.setBounds(130, 52, 100, 30);

        jComboBoxCategory.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "business", "IT", "engineering" }));
        jComboBoxCategory.setSelectedIndex(-1);
        jComboBoxCategory.setToolTipText("Category of book");
        jComboBoxCategory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxCategoryActionPerformed(evt);
            }
        });
        getContentPane().add(jComboBoxCategory);
        jComboBoxCategory.setBounds(130, 110, 100, 22);

        jTextFieldTitle.setToolTipText("Title of book");
        getContentPane().add(jTextFieldTitle);
        jTextFieldTitle.setBounds(130, 160, 100, 30);

        jTextFieldPrice.setToolTipText("price of book");
        jTextFieldPrice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldPriceActionPerformed(evt);
            }
        });
        getContentPane().add(jTextFieldPrice);
        jTextFieldPrice.setBounds(130, 210, 100, 30);

        jTableShow.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane3.setViewportView(jTableShow);

        getContentPane().add(jScrollPane3);
        jScrollPane3.setBounds(10, 320, 410, 350);

        jButtonShowAll.setText("Show All");
        jButtonShowAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonShowAllActionPerformed(evt);
            }
        });
        getContentPane().add(jButtonShowAll);
        jButtonShowAll.setBounds(340, 270, 90, 22);

        jLabelInfo.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabelInfo.setForeground(java.awt.Color.red);
        jLabelInfo.setText("jLabel6");
        getContentPane().add(jLabelInfo);
        jLabelInfo.setBounds(30, 300, 410, 20);

        jButtonFilter.setText("Show By Category");
        jButtonFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonFilterActionPerformed(evt);
            }
        });
        getContentPane().add(jButtonFilter);
        jButtonFilter.setBounds(200, 270, 130, 22);

        jButton1.setText("Logout");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1);
        jButton1.setBounds(350, 10, 72, 22);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTextFieldPriceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldPriceActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldPriceActionPerformed

    private void jComboBoxCategoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxCategoryActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBoxCategoryActionPerformed

    private void jButtonFindByIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonFindByIDActionPerformed
        // TODO add your handling code here:

        //get entered value from ID text field using its getText() method
        int bookId = 0;
        BookDAO bookDAO = new BookDAO();
        Book book = null;
        try {

            //id is empty 
            if (jTextFieldID.getText().isEmpty()) {
                throw new InputException("Enter a Book ID !!!");
            }

            bookId = Integer.parseInt(jTextFieldID.getText().trim());

            //book id should be greater than 1
            if (bookId < 1) {
                throw new InputException("Enter Book ID Greater Than 1 !!");
            }

            book = bookDAO.findBookById(bookId);
            //don't found book //java.lang.NullPointerException
            if (book == null) {
                throw new InputException("Try Agin ,Don't found book number " + bookId);
            }

            //display the book data from the book object in textfields
            if (book.getCategory().equals("business")) {
                jComboBoxCategory.setSelectedIndex(1);
            } else if (book.getCategory().equals("IT")) {
                jComboBoxCategory.setSelectedIndex(2);
            } else {
                jComboBoxCategory.setSelectedIndex(3);
            }

            jTextFieldTitle.setText(book.getTitle());
            jTextFieldPrice.setText(String.valueOf(book.getPrice()));

        } catch (InputException e) {
            jLabelInfo.setText(e.getMessage());
        } catch (SQLException sqlex) {
            jLabelInfo.setText("DBError:" + sqlex.getMessage());
        } catch (NumberFormatException nfe) {
            jLabelInfo.setText("Enter only number in (Book ID )");
        }


    }//GEN-LAST:event_jButtonFindByIDActionPerformed

    private void jButtonDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDeleteActionPerformed
        // TODO add your handling code here:

        BookDAO bookDAO = new BookDAO();
        int deleteStatus = 0;

        try {

            //check if book Id is empty
            if (jTextFieldID.getText().isEmpty()) {
                //show a message in the lable
                throw new InputException("Enter a Book ID !!!");
            }

            //get entered value from ID text field using its getText() method
            int bookId = Integer.parseInt(jTextFieldID.getText().trim());

            //if book object returned is null - bookId does not exist 
            if (bookDAO.findBookById(bookId) == null) {
                throw new InputException("book ID: " + bookId + " not found!");
            }

            //Book record with emptyId exists - delete the book record 
            deleteStatus = bookDAO.deleteBook(bookId);

            if (deleteStatus == 1) {
                jLabelInfo.setText(bookId + " record deleted!");
            } else {
                jLabelInfo.setText("Error deleting " + bookId + " record!");
            }

        } catch (InputException e) {
            jLabelInfo.setText(e.getMessage());
        } catch (SQLException sqlex) {
            jLabelInfo.setText("DBError:" + sqlex.getMessage());
        } catch (NumberFormatException nfe) {
            jLabelInfo.setText("Enter only number in (Book ID) ");
        }
    }//GEN-LAST:event_jButtonDeleteActionPerformed

    private void jTextFieldIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldIDActionPerformed

    private void jButtonShowAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonShowAllActionPerformed
        // TODO add your handling code here:

        BookDAO bookDAO = new BookDAO();

        Stored<Book> bookList = null;

        try {
            bookList = bookDAO.getAllBooks();
        } catch (SQLException sqlex) {
            jLabelInfo.setText("Database error!" + sqlex.getMessage());
        }

        //convert the bookList and data in it to a vector of vectors
        Vector rowDataVector = new Vector();
        Vector columnDataVector = null;

        for (int i = 0; i < bookList.countItems(); i++) {

            columnDataVector = new Vector();
            columnDataVector.add(bookList.get(i).getBookid());
            columnDataVector.add(bookList.get(i).getCategory());
            columnDataVector.add(bookList.get(i).getTitle());
            columnDataVector.add(bookList.get(i).getPrice());

            //add this column data vector to the rowDataVector
            rowDataVector.add(columnDataVector);
        }

        //create a vector for column names
        Vector columnNamesVector = new Vector();
        columnNamesVector.add("BookID");
        columnNamesVector.add("CATEGORY");
        columnNamesVector.add("TITLE");
        columnNamesVector.add("PRICE");

        //init the JTable instance using the row data and column data vectors
        jTableShow = new JTable(rowDataVector, columnNamesVector);
        jScrollPane3.setViewportView(jTableShow);
    }//GEN-LAST:event_jButtonShowAllActionPerformed

    private void jButtonFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonFilterActionPerformed
        // TODO add your handling code here

        //get entered value from ID text field using its getText() method
        String category = jComboBoxCategory.getSelectedItem().toString();

        //call the BookDAO.findBookById() to find the book record
        BookDAO bookDAO = new BookDAO();
        //Book book = null;
        Stored<Book> bookList = null;
        try {

            bookList = bookDAO.findBookByCategory(category);

            //if book object return is null - bookId does not exist 
            if (bookList == null) {
                throw new InputException("book of category: " + category + " not found!");
            }

            //convert the bookList and data in it to a vector of vectors
            Vector rowDataVector = new Vector();
            Vector columnDataVector = null;

            for (int i = 0; i < bookList.countItems(); i++) {

                columnDataVector = new Vector();
                columnDataVector.add(bookList.get(i).getBookid());
                columnDataVector.add(bookList.get(i).getCategory());
                columnDataVector.add(bookList.get(i).getTitle());
                columnDataVector.add(bookList.get(i).getPrice());

                //add this column data vector to the rowDataVector
                rowDataVector.add(columnDataVector);
            }

            //create a vector for column names
            Vector columnNamesVector = new Vector();
            columnNamesVector.add("BookID");
            columnNamesVector.add("CATEGORY");
            columnNamesVector.add("TITLE");
            columnNamesVector.add("PRICE");

            //init the JTable instance using the row data and column data vectors
            jTableShow = new JTable(rowDataVector, columnNamesVector);
            jScrollPane3.setViewportView(jTableShow);
        } catch (InputException e) {
            jLabelInfo.setText(e.getMessage());
        } catch (SQLException sqlex) {
            jLabelInfo.setText("DBError:" + sqlex.getMessage());
        }
    }//GEN-LAST:event_jButtonFilterActionPerformed

    private void jButtonAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddActionPerformed
        // TODO add your handling code here:

        //here use Facade Pattern
        //get all input
        String id = jTextFieldID.getText();
        String c = jComboBoxCategory.getSelectedItem().toString();
        String t = jTextFieldTitle.getText();
        String p = jTextFieldPrice.getText();

        //check if any of the fields are empty 
        BookFacade book = new BookFacade(id, c, t, p);
        boolean r = book.isEmpty();
        if (!r) {
            jLabelInfo.setText("Enter all data!");
            return;
        } else {

            try {
                //read from the text fields
                int bookId = Integer.parseInt(jTextFieldID.getText().trim());
                String category = jComboBoxCategory.getSelectedItem().toString();
                String title = jTextFieldTitle.getText().trim();
                double price = Double.parseDouble(jTextFieldPrice.getText());

                //book id should be greater than 1
                if (bookId < 1) {
                    throw new InputException("Enter Book ID Greater Than 1 !!");
                }

                //Use the DAO to add the new Book to the database
                BookDAO bookDAO = new BookDAO();
                int insertStatus = -1;

                //check if find book with the same ID exists
                if (bookDAO.findBookById(bookId) != null) {
                    throw new InputException("Book ID " + bookId + " already exists!");
                }

                //add the new book 
                insertStatus = bookDAO.addNewBook(bookId, category, title, price);
                if (insertStatus == 1) {
                    jLabelInfo.setText("Record for book title: " + title + " is added!");
                    jTextFieldID.setText("");
                    jTextFieldTitle.setText("");
                    jTextFieldPrice.setText("");
                } else {
                    jLabelInfo.setText("Error adding record for " + title);
                }

            } catch (InputException e) {
                jLabelInfo.setText(e.getMessage());
            } catch (SQLException sqlex) {
                jLabelInfo.setText(sqlex.getMessage());
            } catch (NumberFormatException nfe) {
                jLabelInfo.setText("Enter only number in (Book ID , Price )");
            }

        }


    }//GEN-LAST:event_jButtonAddActionPerformed

    private void jButtonUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonUpdateActionPerformed
        // TODO add your handling code here:

        //read from the text fields
        String id = jTextFieldID.getText();
        String c = jComboBoxCategory.getSelectedItem().toString();
        String t = jTextFieldTitle.getText();
        String p = jTextFieldPrice.getText();

        BookFacade book = new BookFacade(id, c, t, p);
        boolean r = book.isEmpty();
        //check if any of the fields are empty 
        if (!r) {
            jLabelInfo.setText("Enter all data!");
            return;
        }

        //Use the DAO to update the Book if the entered book ID exists
        BookDAO bookDAO = new BookDAO();
        int updateStatus = -1;
        try {
            //read from the text fields
            int bookId = Integer.parseInt(jTextFieldID.getText().trim());
            String category = jComboBoxCategory.getSelectedItem().toString();
            String title = jTextFieldTitle.getText().trim();
            double price = Double.parseDouble(jTextFieldPrice.getText());

            //book id should be greater than 1
            if (bookId < 1) {
                throw new InputException("Enter Book ID Greater Than 1 !!");
            }

            //check if the book ID DOES NOT exist
            if (bookDAO.findBookById(bookId) == null) {
                throw new InputException("Book ID " + bookId + " NOT FOUND!!");
            }

            //update the book data 
            updateStatus = bookDAO.updateBook(bookId, category, title, price);
            if (updateStatus == 1) {
                jLabelInfo.setText("Record for " + bookId + " updated!");
            } else {
                jLabelInfo.setText("Update record for " + bookId);
            }
        } catch (InputException e) {
            jLabelInfo.setText(e.getMessage());
        } catch (SQLException sqlex) {
            jLabelInfo.setText(sqlex.getMessage());
        } catch (NumberFormatException nfe) {
            jLabelInfo.setText("Enter only number in (Book ID , Price )");
        }


    }//GEN-LAST:event_jButtonUpdateActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        UserGUI login = new UserGUI();

        login.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BookGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BookGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BookGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BookGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new BookGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButtonAdd;
    private javax.swing.JButton jButtonDelete;
    private javax.swing.JButton jButtonFilter;
    private javax.swing.JButton jButtonFindByID;
    private javax.swing.JButton jButtonShowAll;
    private javax.swing.JButton jButtonUpdate;
    private javax.swing.JComboBox<String> jComboBoxCategory;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabelInfo;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTable jTableShow;
    private javax.swing.JTextField jTextFieldID;
    private javax.swing.JTextField jTextFieldPrice;
    private javax.swing.JTextField jTextFieldTitle;
    // End of variables declaration//GEN-END:variables
}
